{"title":"Planned vs Reactive Experiment Results","markdown":{"yaml":{"title":"Planned vs Reactive Experiment Results","jupyter":"python3"},"headingText":"Planned","containsRefs":false,"markdown":"\n\n```{python}\nimport json\nimport glob\nimport os\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, date\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nAGE_GROUPS = {\n    0: \"Unknown\",\n    1: \"12-17\",\n    2: \"18-24\",\n    3: \"25-34\",\n    4: \"35-44\",\n    5: \"45-54\",\n    6: \"55-64\",\n    7: \"65+\"\n}\n\n\ndef get_age_label(age_code):\n    \"\"\"Convert age code to descriptive label\"\"\"\n    return AGE_GROUPS.get(age_code, f\"Unknown({age_code})\")\n\n\ndef process_json_files(file_pattern='*.json'):\n    \"\"\"\n    Process multiple JSON files and combine their data into a DataFrame.\n    \"\"\"\n    all_error_data = []\n    all_reactive_data = []\n    false_positives_data = []\n    \n    # Construct the path to the data directory\n    data_dir = os.path.join('test_data', file_pattern)\n    # data_dir = os.path.join('data', file_pattern)\n    \n    counter = 0\n\n    for filename in glob.glob(data_dir):\n        counter += 1\n        try:\n            with open(filename, 'r') as f:\n                # Read the file content\n                file_content = f.read()\n                \n                # Split the content into separate JSON objects\n                json_objects = []\n                current_json = \"\"\n                depth = 0\n                \n                for char in file_content:\n                    current_json += char\n                    if char == '{':\n                        depth += 1\n                    elif char == '}':\n                        depth -= 1\n                        if depth == 0 and current_json.strip():\n                            try:\n                                json_obj = json.loads(current_json.strip())\n                                json_objects.append(json_obj)\n                                current_json = \"\"\n                            except json.JSONDecodeError:\n                                pass\n                \n                # Process the main data object\n                main_data = next((obj for obj in json_objects if 'results' in obj), None)\n                if main_data:\n                    # Extract user info\n                    user_info = main_data.get('userinfo', {})\n                    user_age = user_info.get('age', 0)\n                    \n                    # Handle reactive results if present\n                    if 'reactive_results' in main_data:\n                        reactive_row = {\n                            'filename': filename,\n                            'age': user_age,\n                            **main_data.get('reactive_results', {}).get('ObjectsMissed', {})\n                        }\n                        all_reactive_data.append(reactive_row)\n                    \n                    # Process main results\n                    results = main_data.get('results', {})\n                    for error_type, error_data in results.items():\n                        for instance_num, instance_data in error_data.items():\n                            row = {\n                                'error_type': error_type,\n                                'instance': int(instance_num),\n                                'missed': instance_data['missed'],\n                                'time': instance_data['time'],\n                                'filename': filename,\n                                'age': user_age\n                            }\n                            all_error_data.append(row)\n                \n                # Process false positives data\n                fp_obj = next((obj for obj in json_objects if 'FalsePositives' in obj), None)\n                if fp_obj:\n                    fp_data = fp_obj.get('FalsePositives', {})\n                    for error_type, count in fp_data.items():\n                        false_positives_data.append({\n                            'error_type': error_type,\n                            'count': count,\n                            'filename': filename,\n                            'age': user_age\n                        })\n        except Exception as e:\n            print(f\"Error processing file {filename}: {e}\")\n            continue\n\n    # Create DataFrames with default columns even if empty\n    error_df = pd.DataFrame(all_error_data) if all_error_data else pd.DataFrame(\n        columns=['error_type', 'instance', 'missed', 'time', 'filename', 'age'])\n    reactive_df = pd.DataFrame(all_reactive_data) if all_reactive_data else pd.DataFrame(\n        columns=['filename', 'age', 'rows', 'structures'])\n    false_positives_df = pd.DataFrame(false_positives_data) if false_positives_data else pd.DataFrame(\n        columns=['error_type', 'count', 'filename', 'age'])\n    \n    return error_df, reactive_df, false_positives_df, counter\n\n\ndef create_interactive_visualization(error_df, false_positives_df, type):\n    \"\"\"\n    Create interactive Plotly visualization with stacked bar plots for each error type.\n    \"\"\"\n    error_types = ['CameraError', 'FlightError', 'HardwareError']\n    age_groups = sorted(error_df['age'].unique())\n    colors = {'caught': 'lightgreen', 'missed': 'lightcoral', 'false_positives': 'lightskyblue'}\n    \n    # Create subplots with consistent width\n    fig = make_subplots(\n        rows=1, \n        cols=3, \n        subplot_titles=error_types,\n        horizontal_spacing=0.1\n    )\n    \n    # Keep track of trace indices\n    total_traces = []\n    age_group_traces = []\n    \n    # Create base traces (aggregated view)\n    for i, error_type in enumerate(error_types, 1):\n        error_data = error_df[error_df['error_type'] == error_type]\n        fp_data = false_positives_df[false_positives_df['error_type'] == error_type]\n        \n        # Calculate aggregated values\n        total_caught = (~error_data['missed']).sum()\n        total_missed = error_data['missed'].sum()\n        total_fp = fp_data['count'].sum()\n        \n        # Add traces for aggregated view\n        fig.add_trace(\n            go.Bar(\n                x=['All Ages'],\n                y=[total_caught],\n                name='Caught' if i == 1 else None,\n                marker_color=colors['caught'],\n                showlegend=i == 1,\n                legendgroup='caught',\n                hovertemplate='Caught: %{y}<br>Error Type: ' + error_type + '<extra></extra>',\n            ),\n            row=1, col=i\n        )\n        total_traces.append(len(fig.data) - 1)\n        \n        fig.add_trace(\n            go.Bar(\n                x=['All Ages'],\n                y=[total_missed],\n                name='Missed' if i == 1 else None,\n                marker_color=colors['missed'],\n                showlegend=i == 1,\n                legendgroup='missed',\n                hovertemplate='Missed: %{y}<br>Error Type: ' + error_type + '<extra></extra>',\n            ),\n            row=1, col=i\n        )\n        total_traces.append(len(fig.data) - 1)\n        \n        fig.add_trace(\n            go.Bar(\n                x=['All Ages'],\n                y=[total_fp],\n                name='False Positives' if i == 1 else None,\n                marker_color=colors['false_positives'],\n                showlegend=i == 1,\n                legendgroup='false_positives',\n                hovertemplate='False Positives: %{y}<br>Error Type: ' + error_type + '<extra></extra>',\n            ),\n            row=1, col=i\n        )\n        total_traces.append(len(fig.data) - 1)\n        \n        # Add age group traces (initially hidden)\n        for age_code in age_groups:\n            age_label = get_age_label(age_code)\n            age_data = error_data[error_data['age'] == age_code]\n            age_fp = fp_data[fp_data['age'] == age_code]\n            \n            # Calculate values\n            caught = (~age_data['missed']).sum()\n            missed = age_data['missed'].sum()\n            fp_count = age_fp['count'].sum() if not age_fp.empty else 0\n            \n            fig.add_trace(\n                go.Bar(\n                    x=[age_label],\n                    y=[caught],\n                    name='Caught',\n                    marker_color=colors['caught'],\n                    showlegend=False,\n                    visible=False,\n                    legendgroup='caught',\n                    hovertemplate=f'{age_label}<br>Caught: %{{y}}<extra></extra>',\n                ),\n                row=1, col=i\n            )\n            age_group_traces.append(len(fig.data) - 1)\n            \n            fig.add_trace(\n                go.Bar(\n                    x=[age_label],\n                    y=[missed],\n                    name='Missed',\n                    marker_color=colors['missed'],\n                    showlegend=False,\n                    visible=False,\n                    legendgroup='missed',\n                    hovertemplate=f'{age_label}<br>Missed: %{{y}}<extra></extra>',\n                ),\n                row=1, col=i\n            )\n            age_group_traces.append(len(fig.data) - 1)\n            \n            fig.add_trace(\n                go.Bar(\n                    x=[age_label],\n                    y=[fp_count],\n                    name='False Positives',\n                    marker_color=colors['false_positives'],\n                    showlegend=False,\n                    visible=False,\n                    legendgroup='false_positives',\n                    hovertemplate=f'{age_label}<br>False Positives: %{{y}}<extra></extra>',\n                ),\n                row=1, col=i\n            )\n            age_group_traces.append(len(fig.data) - 1)\n\n    # Add buttons for age group selection\n    buttons = [\n        dict(\n            args=[{\n                'visible': [i in total_traces for i in range(len(fig.data))]\n            }],\n            label=\"All Ages\",\n            method=\"restyle\"\n        )\n    ]\n    \n    # Add button for each age group\n    for idx, age_code in enumerate(age_groups):\n        age_label = get_age_label(age_code)\n        age_visibility = []\n        for i in range(len(fig.data)):\n            subplot_idx = i // (3 * (len(age_groups) + 1))\n            is_age_trace = (i - (subplot_idx * 3 * (len(age_groups) + 1)) - 3) // 3 == idx\n            age_visibility.append(is_age_trace)\n        \n        buttons.append(dict(\n            args=[{'visible': age_visibility}],\n            label=age_label,\n            method=\"restyle\"\n        ))\n\n    # Update layout\n    fig.update_layout(\n        barmode='stack',\n        title_text=f\"{type.capitalize()} Mode: Error Distribution by Type and Age Group\",\n        height=500,\n        width=1000,\n        showlegend=True,\n        legend_title_text=\"Error Categories\",\n        hovermode='x unified',\n        margin=dict(l=50, r=120, t=130, b=50),\n        updatemenus=[dict(\n            buttons=buttons,\n            direction=\"down\",\n            showactive=True,\n            x=1.2,\n            xanchor=\"right\",\n            y=1.1,\n            yanchor=\"bottom\",\n            bgcolor='white',\n            bordercolor='darkgray',\n            font=dict(size=12),\n            pad=dict(r=10, t=10)\n        )],\n        annotations=[\n            dict(\n                text=title,\n                x=x,\n                y=1.025,\n                xref=\"paper\",\n                yref=\"paper\",\n                showarrow=False,\n                font=dict(size=14)\n            )\n            for title, x in zip(error_types, [0.13, 0.5, 0.87])\n        ]\n    )\n\n    # Update axes labels\n    fig.update_yaxes(title_text=\"Count\", row=1, col=1)\n    \n    return fig\n\n\ndef create_interactive_visualization(error_df, false_positives_df, type):\n    \"\"\"\n    Create interactive Plotly visualization with stacked bar plots for each error type.\n    \"\"\"\n    error_types = ['CameraError', 'FlightError', 'HardwareError']\n    age_groups = sorted(error_df['age'].unique())\n    colors = {'caught': 'lightgreen', 'missed': 'lightcoral', 'false_positives': 'lightskyblue'}\n    \n    # Create subplots with consistent width\n    fig = make_subplots(\n        rows=1, \n        cols=3, \n        subplot_titles=error_types,\n        horizontal_spacing=0.1\n    )\n    \n    # Keep track of trace indices\n    total_traces = []\n    age_group_traces = []\n    \n    # Create base traces (aggregated view)\n    for i, error_type in enumerate(error_types, 1):\n        error_data = error_df[error_df['error_type'] == error_type]\n        fp_data = false_positives_df[false_positives_df['error_type'] == error_type]\n        \n        # Calculate aggregated values\n        total_caught = (~error_data['missed']).sum()\n        total_missed = error_data['missed'].sum()\n        total_fp = fp_data['count'].sum()\n        \n        # Add traces for aggregated view\n        fig.add_trace(\n            go.Bar(\n                x=['All Ages'],\n                y=[total_caught],\n                name='Caught' if i == 1 else None,\n                marker_color=colors['caught'],\n                showlegend=i == 1,\n                legendgroup='caught',\n                hovertemplate='Caught: %{y}<br>Error Type: ' + error_type + '<extra></extra>',\n            ),\n            row=1, col=i\n        )\n        total_traces.append(len(fig.data) - 1)\n        \n        fig.add_trace(\n            go.Bar(\n                x=['All Ages'],\n                y=[total_missed],\n                name='Missed' if i == 1 else None,\n                marker_color=colors['missed'],\n                showlegend=i == 1,\n                legendgroup='missed',\n                hovertemplate='Missed: %{y}<br>Error Type: ' + error_type + '<extra></extra>',\n            ),\n            row=1, col=i\n        )\n        total_traces.append(len(fig.data) - 1)\n        \n        fig.add_trace(\n            go.Bar(\n                x=['All Ages'],\n                y=[total_fp],\n                name='False Positives' if i == 1 else None,\n                marker_color=colors['false_positives'],\n                showlegend=i == 1,\n                legendgroup='false_positives',\n                hovertemplate='False Positives: %{y}<br>Error Type: ' + error_type + '<extra></extra>',\n            ),\n            row=1, col=i\n        )\n        total_traces.append(len(fig.data) - 1)\n        \n        # Add age group traces (initially hidden)\n        for age_code in age_groups:\n            age_label = get_age_label(age_code)\n            age_data = error_data[error_data['age'] == age_code]\n            age_fp = fp_data[fp_data['age'] == age_code]\n            \n            # Calculate values\n            caught = (~age_data['missed']).sum()\n            missed = age_data['missed'].sum()\n            fp_count = age_fp['count'].sum() if not age_fp.empty else 0\n            \n            fig.add_trace(\n                go.Bar(\n                    x=[age_label],\n                    y=[caught],\n                    name='Caught',\n                    marker_color=colors['caught'],\n                    showlegend=False,\n                    visible=False,\n                    legendgroup='caught',\n                    hovertemplate=f'{age_label}<br>Caught: %{{y}}<extra></extra>',\n                ),\n                row=1, col=i\n            )\n            age_group_traces.append(len(fig.data) - 1)\n            \n            fig.add_trace(\n                go.Bar(\n                    x=[age_label],\n                    y=[missed],\n                    name='Missed',\n                    marker_color=colors['missed'],\n                    showlegend=False,\n                    visible=False,\n                    legendgroup='missed',\n                    hovertemplate=f'{age_label}<br>Missed: %{{y}}<extra></extra>',\n                ),\n                row=1, col=i\n            )\n            age_group_traces.append(len(fig.data) - 1)\n            \n            fig.add_trace(\n                go.Bar(\n                    x=[age_label],\n                    y=[fp_count],\n                    name='False Positives',\n                    marker_color=colors['false_positives'],\n                    showlegend=False,\n                    visible=False,\n                    legendgroup='false_positives',\n                    hovertemplate=f'{age_label}<br>False Positives: %{{y}}<extra></extra>',\n                ),\n                row=1, col=i\n            )\n            age_group_traces.append(len(fig.data) - 1)\n\n    # Add buttons for age group selection\n    buttons = [\n        dict(\n            args=[{\n                'visible': [i in total_traces for i in range(len(fig.data))]\n            }],\n            label=\"All Ages\",\n            method=\"restyle\"\n        )\n    ]\n    \n    # Add button for each age group\n    for idx, age_code in enumerate(age_groups):\n        age_label = get_age_label(age_code)\n        age_visibility = []\n        for i in range(len(fig.data)):\n            subplot_idx = i // (3 * (len(age_groups) + 1))\n            is_age_trace = (i - (subplot_idx * 3 * (len(age_groups) + 1)) - 3) // 3 == idx\n            age_visibility.append(is_age_trace)\n        \n        buttons.append(dict(\n            args=[{'visible': age_visibility}],\n            label=age_label,\n            method=\"restyle\"\n        ))\n\n    # Update layout\n    fig.update_layout(\n        barmode='stack',\n        title_text=f\"{type.capitalize()} Mode: Error Distribution by Type and Age Group\",\n        height=500,\n        width=1000,\n        showlegend=True,\n        legend_title_text=\"Error Categories\",\n        hovermode='x unified',\n        margin=dict(l=50, r=120, t=130, b=50),\n        updatemenus=[dict(\n            buttons=buttons,\n            direction=\"down\",\n            showactive=True,\n            x=1.2,\n            xanchor=\"right\",\n            y=1.1,\n            yanchor=\"bottom\",\n            bgcolor='white',\n            bordercolor='darkgray',\n            font=dict(size=12),\n            pad=dict(r=10, t=10)\n        )],\n        annotations=[\n            dict(\n                text=title,\n                x=x,\n                y=1.025,\n                xref=\"paper\",\n                yref=\"paper\",\n                showarrow=False,\n                font=dict(size=14)\n            )\n            for title, x in zip(error_types, [0.13, 0.5, 0.87])\n        ]\n    )\n\n    # Update axes labels\n    fig.update_yaxes(title_text=\"Count\", row=1, col=1)\n    \n    return fig\n\n\ndef create_heatmap(error_df, type):\n    \"\"\"\n    Create Plotly heatmap for average error times with YlOrRd color scale and zero minimum.\n    Uses zero values only when no non-zero values exist for a particular \n    instance/error type combination.\n    \"\"\"\n    all_data_matrix = pd.pivot_table(\n        error_df,\n        values='time',\n        index='instance',\n        columns='error_type',\n        aggfunc=lambda x: list(x)\n    )\n    \n    # Create matrix for final values\n    time_matrix = pd.DataFrame(\n        index=all_data_matrix.index,\n        columns=all_data_matrix.columns,\n        dtype=float\n    )\n    \n    # Fill in averages, using non-zero values when available, zero otherwise\n    for idx in all_data_matrix.index:\n        for col in all_data_matrix.columns:\n            values = all_data_matrix.loc[idx, col]\n            non_zero_values = [v for v in values if v > 0]\n            if non_zero_values:\n                time_matrix.loc[idx, col] = np.mean(non_zero_values)\n            else:\n                # If only zeros exist for this cell, use 0\n                time_matrix.loc[idx, col] = 0\n    \n    # print(f\"\\n{type} Mode - Time Matrix Statistics:\")\n    # print(f\"Min value: {time_matrix.values.min()}\")\n    # print(f\"Max value: {time_matrix.values.max()}\")\n    \n    hover_text = np.empty(time_matrix.shape, dtype=object)\n    for i in range(time_matrix.shape[0]):\n        for j in range(time_matrix.shape[1]):\n            values = all_data_matrix.iloc[i, j]\n            non_zero_count = sum(1 for v in values if v > 0)\n            total_count = len(values)\n            if non_zero_count > 0:\n                hover_text[i, j] = f\"Instance: {time_matrix.index[i]}<br>\" \\\n                                 f\"Error Type: {time_matrix.columns[j]}<br>\" \\\n                                 f\"Avg Time: {time_matrix.iloc[i, j]:.2f}<br>\" \\\n                                 f\"(from {non_zero_count} non-zero values)\"\n            else:\n                hover_text[i, j] = f\"Instance: {time_matrix.index[i]}<br>\" \\\n                                 f\"Error Type: {time_matrix.columns[j]}<br>\" \\\n                                 f\"Time: 0 (all {total_count} values were zero)\"\n    \n    fig = go.Figure(data=go.Heatmap(\n        z=time_matrix.values,\n        x=time_matrix.columns,\n        y=time_matrix.index,\n        colorscale='YlOrRd',\n        showscale=True,\n        text=np.round(time_matrix.values, 2),\n        texttemplate='%{text}',\n        textfont={'size': 10},\n        hovertemplate='%{customdata}<extra></extra>',\n        customdata=hover_text,\n        zmin=0,  # Set minimum value to 0\n        zmid=time_matrix.values.max() / 2 if time_matrix.values.max() > 0 else 0.5,  # Set midpoint\n        zauto=False  # Disable automatic range\n    ))\n    \n    fig.update_layout(\n        title=f'{type.capitalize()} Mode: Average Error Resolution Time by Instance<br><sub>*Using non-zero values where available; zero values shown where no non-zero times exist</sub>',\n        xaxis_title='Error Type',\n        yaxis_title='Instance',\n        height=500,\n        coloraxis_colorbar_title='Time'\n    )\n\n    fig = go.Figure(data=go.Heatmap(\n        z=time_matrix.values,\n        x=time_matrix.columns,\n        y=time_matrix.index,\n        colorscale='YlOrRd',\n        showscale=True,\n        text=np.round(time_matrix.values, 2),\n        texttemplate='%{text}',\n        textfont={'size': 10},\n        hovertemplate='%{customdata}<extra></extra>',\n        customdata=hover_text,\n        zmin=0,\n        zmid=time_matrix.values.max() / 2 if time_matrix.values.max() > 0 else 0.5,\n        zauto=False\n    ))\n    \n    fig.update_layout(\n        title=f'{type.capitalize()} Mode: Average Error Resolution Time by Instance<br><sub>Using non-zero values where available; zero values shown where no non-zero times exist</sub>',\n        xaxis_title='Error Type',\n        yaxis_title='Instance',\n        height=500,\n        width=1000,  # Set explicit width\n        margin=dict(l=50, r=50, t=100, b=50)\n    )\n    \n    return fig\n\n\ndef create_response_time_histogram(planned_df, reactive_df):\n    \"\"\"\n    Create a combined histogram and line chart comparing planned and reactive response times.\n    \"\"\"\n    # Calculate average response times for non-zero values for both modes\n    error_types = ['CameraError', 'FlightError', 'HardwareError']\n    \n    # Process planned data\n    planned_times = {}\n    for error_type in error_types:\n        times = planned_df[planned_df['error_type'] == error_type]['time']\n        non_zero_times = times[times > 0]\n        planned_times[error_type] = non_zero_times.mean() if len(non_zero_times) > 0 else 0\n\n    # Process reactive data\n    reactive_times = {}\n    for error_type in error_types:\n        times = reactive_df[reactive_df['error_type'] == error_type]['time']\n        non_zero_times = times[times > 0]\n        reactive_times[error_type] = non_zero_times.mean() if len(non_zero_times) > 0 else 0\n\n    # Create figure with secondary y-axis\n    fig = go.Figure()\n\n    # Add bars for planned mode\n    fig.add_trace(\n        go.Bar(\n            name='Planned',\n            x=error_types,\n            y=list(planned_times.values()),\n            text=np.round(list(planned_times.values()), 3),\n            textposition='auto',\n            marker_color='rgba(158,202,225,0.6)',\n            hovertemplate='Planned Mode<br>%{x}: %{y:.3f}s<extra></extra>'\n        )\n    )\n\n    # Add bars for reactive mode\n    fig.add_trace(\n        go.Bar(\n            name='Reactive',\n            x=error_types,\n            y=list(reactive_times.values()),\n            text=np.round(list(reactive_times.values()), 3),\n            textposition='auto',\n            marker_color='rgba(94,158,217,0.6)',\n            hovertemplate='Reactive Mode<br>%{x}: %{y:.3f}s<extra></extra>'\n        )\n    )\n\n    # Add lines connecting the points\n    fig.add_trace(\n        go.Scatter(\n            name='Planned (trend)',\n            x=error_types,\n            y=list(planned_times.values()),\n            mode='lines+markers',\n            line=dict(color='rgb(58,102,171)', width=2),\n            marker=dict(size=8),\n            hovertemplate='Planned Mode<br>%{x}: %{y:.3f}s<extra></extra>'\n        )\n    )\n\n    fig.add_trace(\n        go.Scatter(\n            name='Reactive (trend)',\n            x=error_types,\n            y=list(reactive_times.values()),\n            mode='lines+markers',\n            line=dict(color='rgb(137,59,59)', width=2),\n            marker=dict(size=8),\n            hovertemplate='Reactive Mode<br>%{x}: %{y:.3f}s<extra></extra>'\n        )\n    )\n\n    # Update layout\n    fig.update_layout(\n        title='Average Response Time Comparison: Planned vs Reactive',\n        xaxis_title='Error Type',\n        yaxis_title='Average Response Time (seconds)',\n        height=500,\n        width=1000,\n        margin=dict(l=50, r=50, t=100, b=50),\n        barmode='group',\n        hovermode='x unified',\n        legend=dict(\n            orientation=\"h\",\n            yanchor=\"bottom\",\n            y=1.02,\n            xanchor=\"right\",\n            x=1\n        )\n    )\n    \n    return fig\n\n\ndef planned_plot():\n    today = datetime.strftime(datetime.now(), '%d-%m-%Y')\n    error_df, planned_df, false_positives_df, counter = process_json_files('*-planned.json')\n    print(f\"Found {counter} data points as of {today}.\")\n    \n    # Create and display interactive distribution plot\n    dist_fig = create_interactive_visualization(error_df, false_positives_df, 'planned')\n    dist_fig.show()\n    \n    # Create and display heatmap\n    heatmap_fig = create_heatmap(error_df, 'planned')\n    heatmap_fig.show()\n    \n\ndef reactive_plot():\n    today = datetime.strftime(datetime.now(), '%d-%m-%Y')\n    error_df, reactive_df, false_positives_df, counter = process_json_files('*-reactive.json')\n    print(f\"Found {counter} data points as of {today}.\")\n    \n    # Create and display interactive distribution plot\n    dist_fig = create_interactive_visualization(error_df, false_positives_df, 'reactive')\n    dist_fig.show()\n    \n    # Create and display heatmap\n    heatmap_fig = create_heatmap(error_df, 'reactive')\n    heatmap_fig.show()\n\n\ndef create_histogram():\n    \"\"\"\n    Create visualization with both planned and reactive data.\n    \"\"\"\n    today = datetime.strftime(datetime.now(), '%d-%m-%Y')\n    \n    # Process planned data\n    planned_error_df, planned_df, planned_fp_df, planned_counter = process_json_files('*-planned.json')\n    print(f\"Found {planned_counter} planned mode data points as of {today}.\")\n    \n    # Process reactive data\n    reactive_error_df, reactive_df, reactive_fp_df, reactive_counter = process_json_files('*-reactive.json')\n    print(f\"Found {reactive_counter} reactive mode data points as of {today}.\")\n       \n    # Create combined response time visualization\n    response_time_fig = create_response_time_histogram(planned_error_df, reactive_error_df)\n    response_time_fig.show()\n```\n\n::: {.panel-tabset}\n```{python}\nplanned_plot()\ncreate_histogram()\n```\n\n## Reactive\n```{python}\nreactive_plot()\ncreate_histogram()\n```\n:::","srcMarkdownNoYaml":"\n\n```{python}\nimport json\nimport glob\nimport os\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, date\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nAGE_GROUPS = {\n    0: \"Unknown\",\n    1: \"12-17\",\n    2: \"18-24\",\n    3: \"25-34\",\n    4: \"35-44\",\n    5: \"45-54\",\n    6: \"55-64\",\n    7: \"65+\"\n}\n\n\ndef get_age_label(age_code):\n    \"\"\"Convert age code to descriptive label\"\"\"\n    return AGE_GROUPS.get(age_code, f\"Unknown({age_code})\")\n\n\ndef process_json_files(file_pattern='*.json'):\n    \"\"\"\n    Process multiple JSON files and combine their data into a DataFrame.\n    \"\"\"\n    all_error_data = []\n    all_reactive_data = []\n    false_positives_data = []\n    \n    # Construct the path to the data directory\n    data_dir = os.path.join('test_data', file_pattern)\n    # data_dir = os.path.join('data', file_pattern)\n    \n    counter = 0\n\n    for filename in glob.glob(data_dir):\n        counter += 1\n        try:\n            with open(filename, 'r') as f:\n                # Read the file content\n                file_content = f.read()\n                \n                # Split the content into separate JSON objects\n                json_objects = []\n                current_json = \"\"\n                depth = 0\n                \n                for char in file_content:\n                    current_json += char\n                    if char == '{':\n                        depth += 1\n                    elif char == '}':\n                        depth -= 1\n                        if depth == 0 and current_json.strip():\n                            try:\n                                json_obj = json.loads(current_json.strip())\n                                json_objects.append(json_obj)\n                                current_json = \"\"\n                            except json.JSONDecodeError:\n                                pass\n                \n                # Process the main data object\n                main_data = next((obj for obj in json_objects if 'results' in obj), None)\n                if main_data:\n                    # Extract user info\n                    user_info = main_data.get('userinfo', {})\n                    user_age = user_info.get('age', 0)\n                    \n                    # Handle reactive results if present\n                    if 'reactive_results' in main_data:\n                        reactive_row = {\n                            'filename': filename,\n                            'age': user_age,\n                            **main_data.get('reactive_results', {}).get('ObjectsMissed', {})\n                        }\n                        all_reactive_data.append(reactive_row)\n                    \n                    # Process main results\n                    results = main_data.get('results', {})\n                    for error_type, error_data in results.items():\n                        for instance_num, instance_data in error_data.items():\n                            row = {\n                                'error_type': error_type,\n                                'instance': int(instance_num),\n                                'missed': instance_data['missed'],\n                                'time': instance_data['time'],\n                                'filename': filename,\n                                'age': user_age\n                            }\n                            all_error_data.append(row)\n                \n                # Process false positives data\n                fp_obj = next((obj for obj in json_objects if 'FalsePositives' in obj), None)\n                if fp_obj:\n                    fp_data = fp_obj.get('FalsePositives', {})\n                    for error_type, count in fp_data.items():\n                        false_positives_data.append({\n                            'error_type': error_type,\n                            'count': count,\n                            'filename': filename,\n                            'age': user_age\n                        })\n        except Exception as e:\n            print(f\"Error processing file {filename}: {e}\")\n            continue\n\n    # Create DataFrames with default columns even if empty\n    error_df = pd.DataFrame(all_error_data) if all_error_data else pd.DataFrame(\n        columns=['error_type', 'instance', 'missed', 'time', 'filename', 'age'])\n    reactive_df = pd.DataFrame(all_reactive_data) if all_reactive_data else pd.DataFrame(\n        columns=['filename', 'age', 'rows', 'structures'])\n    false_positives_df = pd.DataFrame(false_positives_data) if false_positives_data else pd.DataFrame(\n        columns=['error_type', 'count', 'filename', 'age'])\n    \n    return error_df, reactive_df, false_positives_df, counter\n\n\ndef create_interactive_visualization(error_df, false_positives_df, type):\n    \"\"\"\n    Create interactive Plotly visualization with stacked bar plots for each error type.\n    \"\"\"\n    error_types = ['CameraError', 'FlightError', 'HardwareError']\n    age_groups = sorted(error_df['age'].unique())\n    colors = {'caught': 'lightgreen', 'missed': 'lightcoral', 'false_positives': 'lightskyblue'}\n    \n    # Create subplots with consistent width\n    fig = make_subplots(\n        rows=1, \n        cols=3, \n        subplot_titles=error_types,\n        horizontal_spacing=0.1\n    )\n    \n    # Keep track of trace indices\n    total_traces = []\n    age_group_traces = []\n    \n    # Create base traces (aggregated view)\n    for i, error_type in enumerate(error_types, 1):\n        error_data = error_df[error_df['error_type'] == error_type]\n        fp_data = false_positives_df[false_positives_df['error_type'] == error_type]\n        \n        # Calculate aggregated values\n        total_caught = (~error_data['missed']).sum()\n        total_missed = error_data['missed'].sum()\n        total_fp = fp_data['count'].sum()\n        \n        # Add traces for aggregated view\n        fig.add_trace(\n            go.Bar(\n                x=['All Ages'],\n                y=[total_caught],\n                name='Caught' if i == 1 else None,\n                marker_color=colors['caught'],\n                showlegend=i == 1,\n                legendgroup='caught',\n                hovertemplate='Caught: %{y}<br>Error Type: ' + error_type + '<extra></extra>',\n            ),\n            row=1, col=i\n        )\n        total_traces.append(len(fig.data) - 1)\n        \n        fig.add_trace(\n            go.Bar(\n                x=['All Ages'],\n                y=[total_missed],\n                name='Missed' if i == 1 else None,\n                marker_color=colors['missed'],\n                showlegend=i == 1,\n                legendgroup='missed',\n                hovertemplate='Missed: %{y}<br>Error Type: ' + error_type + '<extra></extra>',\n            ),\n            row=1, col=i\n        )\n        total_traces.append(len(fig.data) - 1)\n        \n        fig.add_trace(\n            go.Bar(\n                x=['All Ages'],\n                y=[total_fp],\n                name='False Positives' if i == 1 else None,\n                marker_color=colors['false_positives'],\n                showlegend=i == 1,\n                legendgroup='false_positives',\n                hovertemplate='False Positives: %{y}<br>Error Type: ' + error_type + '<extra></extra>',\n            ),\n            row=1, col=i\n        )\n        total_traces.append(len(fig.data) - 1)\n        \n        # Add age group traces (initially hidden)\n        for age_code in age_groups:\n            age_label = get_age_label(age_code)\n            age_data = error_data[error_data['age'] == age_code]\n            age_fp = fp_data[fp_data['age'] == age_code]\n            \n            # Calculate values\n            caught = (~age_data['missed']).sum()\n            missed = age_data['missed'].sum()\n            fp_count = age_fp['count'].sum() if not age_fp.empty else 0\n            \n            fig.add_trace(\n                go.Bar(\n                    x=[age_label],\n                    y=[caught],\n                    name='Caught',\n                    marker_color=colors['caught'],\n                    showlegend=False,\n                    visible=False,\n                    legendgroup='caught',\n                    hovertemplate=f'{age_label}<br>Caught: %{{y}}<extra></extra>',\n                ),\n                row=1, col=i\n            )\n            age_group_traces.append(len(fig.data) - 1)\n            \n            fig.add_trace(\n                go.Bar(\n                    x=[age_label],\n                    y=[missed],\n                    name='Missed',\n                    marker_color=colors['missed'],\n                    showlegend=False,\n                    visible=False,\n                    legendgroup='missed',\n                    hovertemplate=f'{age_label}<br>Missed: %{{y}}<extra></extra>',\n                ),\n                row=1, col=i\n            )\n            age_group_traces.append(len(fig.data) - 1)\n            \n            fig.add_trace(\n                go.Bar(\n                    x=[age_label],\n                    y=[fp_count],\n                    name='False Positives',\n                    marker_color=colors['false_positives'],\n                    showlegend=False,\n                    visible=False,\n                    legendgroup='false_positives',\n                    hovertemplate=f'{age_label}<br>False Positives: %{{y}}<extra></extra>',\n                ),\n                row=1, col=i\n            )\n            age_group_traces.append(len(fig.data) - 1)\n\n    # Add buttons for age group selection\n    buttons = [\n        dict(\n            args=[{\n                'visible': [i in total_traces for i in range(len(fig.data))]\n            }],\n            label=\"All Ages\",\n            method=\"restyle\"\n        )\n    ]\n    \n    # Add button for each age group\n    for idx, age_code in enumerate(age_groups):\n        age_label = get_age_label(age_code)\n        age_visibility = []\n        for i in range(len(fig.data)):\n            subplot_idx = i // (3 * (len(age_groups) + 1))\n            is_age_trace = (i - (subplot_idx * 3 * (len(age_groups) + 1)) - 3) // 3 == idx\n            age_visibility.append(is_age_trace)\n        \n        buttons.append(dict(\n            args=[{'visible': age_visibility}],\n            label=age_label,\n            method=\"restyle\"\n        ))\n\n    # Update layout\n    fig.update_layout(\n        barmode='stack',\n        title_text=f\"{type.capitalize()} Mode: Error Distribution by Type and Age Group\",\n        height=500,\n        width=1000,\n        showlegend=True,\n        legend_title_text=\"Error Categories\",\n        hovermode='x unified',\n        margin=dict(l=50, r=120, t=130, b=50),\n        updatemenus=[dict(\n            buttons=buttons,\n            direction=\"down\",\n            showactive=True,\n            x=1.2,\n            xanchor=\"right\",\n            y=1.1,\n            yanchor=\"bottom\",\n            bgcolor='white',\n            bordercolor='darkgray',\n            font=dict(size=12),\n            pad=dict(r=10, t=10)\n        )],\n        annotations=[\n            dict(\n                text=title,\n                x=x,\n                y=1.025,\n                xref=\"paper\",\n                yref=\"paper\",\n                showarrow=False,\n                font=dict(size=14)\n            )\n            for title, x in zip(error_types, [0.13, 0.5, 0.87])\n        ]\n    )\n\n    # Update axes labels\n    fig.update_yaxes(title_text=\"Count\", row=1, col=1)\n    \n    return fig\n\n\ndef create_interactive_visualization(error_df, false_positives_df, type):\n    \"\"\"\n    Create interactive Plotly visualization with stacked bar plots for each error type.\n    \"\"\"\n    error_types = ['CameraError', 'FlightError', 'HardwareError']\n    age_groups = sorted(error_df['age'].unique())\n    colors = {'caught': 'lightgreen', 'missed': 'lightcoral', 'false_positives': 'lightskyblue'}\n    \n    # Create subplots with consistent width\n    fig = make_subplots(\n        rows=1, \n        cols=3, \n        subplot_titles=error_types,\n        horizontal_spacing=0.1\n    )\n    \n    # Keep track of trace indices\n    total_traces = []\n    age_group_traces = []\n    \n    # Create base traces (aggregated view)\n    for i, error_type in enumerate(error_types, 1):\n        error_data = error_df[error_df['error_type'] == error_type]\n        fp_data = false_positives_df[false_positives_df['error_type'] == error_type]\n        \n        # Calculate aggregated values\n        total_caught = (~error_data['missed']).sum()\n        total_missed = error_data['missed'].sum()\n        total_fp = fp_data['count'].sum()\n        \n        # Add traces for aggregated view\n        fig.add_trace(\n            go.Bar(\n                x=['All Ages'],\n                y=[total_caught],\n                name='Caught' if i == 1 else None,\n                marker_color=colors['caught'],\n                showlegend=i == 1,\n                legendgroup='caught',\n                hovertemplate='Caught: %{y}<br>Error Type: ' + error_type + '<extra></extra>',\n            ),\n            row=1, col=i\n        )\n        total_traces.append(len(fig.data) - 1)\n        \n        fig.add_trace(\n            go.Bar(\n                x=['All Ages'],\n                y=[total_missed],\n                name='Missed' if i == 1 else None,\n                marker_color=colors['missed'],\n                showlegend=i == 1,\n                legendgroup='missed',\n                hovertemplate='Missed: %{y}<br>Error Type: ' + error_type + '<extra></extra>',\n            ),\n            row=1, col=i\n        )\n        total_traces.append(len(fig.data) - 1)\n        \n        fig.add_trace(\n            go.Bar(\n                x=['All Ages'],\n                y=[total_fp],\n                name='False Positives' if i == 1 else None,\n                marker_color=colors['false_positives'],\n                showlegend=i == 1,\n                legendgroup='false_positives',\n                hovertemplate='False Positives: %{y}<br>Error Type: ' + error_type + '<extra></extra>',\n            ),\n            row=1, col=i\n        )\n        total_traces.append(len(fig.data) - 1)\n        \n        # Add age group traces (initially hidden)\n        for age_code in age_groups:\n            age_label = get_age_label(age_code)\n            age_data = error_data[error_data['age'] == age_code]\n            age_fp = fp_data[fp_data['age'] == age_code]\n            \n            # Calculate values\n            caught = (~age_data['missed']).sum()\n            missed = age_data['missed'].sum()\n            fp_count = age_fp['count'].sum() if not age_fp.empty else 0\n            \n            fig.add_trace(\n                go.Bar(\n                    x=[age_label],\n                    y=[caught],\n                    name='Caught',\n                    marker_color=colors['caught'],\n                    showlegend=False,\n                    visible=False,\n                    legendgroup='caught',\n                    hovertemplate=f'{age_label}<br>Caught: %{{y}}<extra></extra>',\n                ),\n                row=1, col=i\n            )\n            age_group_traces.append(len(fig.data) - 1)\n            \n            fig.add_trace(\n                go.Bar(\n                    x=[age_label],\n                    y=[missed],\n                    name='Missed',\n                    marker_color=colors['missed'],\n                    showlegend=False,\n                    visible=False,\n                    legendgroup='missed',\n                    hovertemplate=f'{age_label}<br>Missed: %{{y}}<extra></extra>',\n                ),\n                row=1, col=i\n            )\n            age_group_traces.append(len(fig.data) - 1)\n            \n            fig.add_trace(\n                go.Bar(\n                    x=[age_label],\n                    y=[fp_count],\n                    name='False Positives',\n                    marker_color=colors['false_positives'],\n                    showlegend=False,\n                    visible=False,\n                    legendgroup='false_positives',\n                    hovertemplate=f'{age_label}<br>False Positives: %{{y}}<extra></extra>',\n                ),\n                row=1, col=i\n            )\n            age_group_traces.append(len(fig.data) - 1)\n\n    # Add buttons for age group selection\n    buttons = [\n        dict(\n            args=[{\n                'visible': [i in total_traces for i in range(len(fig.data))]\n            }],\n            label=\"All Ages\",\n            method=\"restyle\"\n        )\n    ]\n    \n    # Add button for each age group\n    for idx, age_code in enumerate(age_groups):\n        age_label = get_age_label(age_code)\n        age_visibility = []\n        for i in range(len(fig.data)):\n            subplot_idx = i // (3 * (len(age_groups) + 1))\n            is_age_trace = (i - (subplot_idx * 3 * (len(age_groups) + 1)) - 3) // 3 == idx\n            age_visibility.append(is_age_trace)\n        \n        buttons.append(dict(\n            args=[{'visible': age_visibility}],\n            label=age_label,\n            method=\"restyle\"\n        ))\n\n    # Update layout\n    fig.update_layout(\n        barmode='stack',\n        title_text=f\"{type.capitalize()} Mode: Error Distribution by Type and Age Group\",\n        height=500,\n        width=1000,\n        showlegend=True,\n        legend_title_text=\"Error Categories\",\n        hovermode='x unified',\n        margin=dict(l=50, r=120, t=130, b=50),\n        updatemenus=[dict(\n            buttons=buttons,\n            direction=\"down\",\n            showactive=True,\n            x=1.2,\n            xanchor=\"right\",\n            y=1.1,\n            yanchor=\"bottom\",\n            bgcolor='white',\n            bordercolor='darkgray',\n            font=dict(size=12),\n            pad=dict(r=10, t=10)\n        )],\n        annotations=[\n            dict(\n                text=title,\n                x=x,\n                y=1.025,\n                xref=\"paper\",\n                yref=\"paper\",\n                showarrow=False,\n                font=dict(size=14)\n            )\n            for title, x in zip(error_types, [0.13, 0.5, 0.87])\n        ]\n    )\n\n    # Update axes labels\n    fig.update_yaxes(title_text=\"Count\", row=1, col=1)\n    \n    return fig\n\n\ndef create_heatmap(error_df, type):\n    \"\"\"\n    Create Plotly heatmap for average error times with YlOrRd color scale and zero minimum.\n    Uses zero values only when no non-zero values exist for a particular \n    instance/error type combination.\n    \"\"\"\n    all_data_matrix = pd.pivot_table(\n        error_df,\n        values='time',\n        index='instance',\n        columns='error_type',\n        aggfunc=lambda x: list(x)\n    )\n    \n    # Create matrix for final values\n    time_matrix = pd.DataFrame(\n        index=all_data_matrix.index,\n        columns=all_data_matrix.columns,\n        dtype=float\n    )\n    \n    # Fill in averages, using non-zero values when available, zero otherwise\n    for idx in all_data_matrix.index:\n        for col in all_data_matrix.columns:\n            values = all_data_matrix.loc[idx, col]\n            non_zero_values = [v for v in values if v > 0]\n            if non_zero_values:\n                time_matrix.loc[idx, col] = np.mean(non_zero_values)\n            else:\n                # If only zeros exist for this cell, use 0\n                time_matrix.loc[idx, col] = 0\n    \n    # print(f\"\\n{type} Mode - Time Matrix Statistics:\")\n    # print(f\"Min value: {time_matrix.values.min()}\")\n    # print(f\"Max value: {time_matrix.values.max()}\")\n    \n    hover_text = np.empty(time_matrix.shape, dtype=object)\n    for i in range(time_matrix.shape[0]):\n        for j in range(time_matrix.shape[1]):\n            values = all_data_matrix.iloc[i, j]\n            non_zero_count = sum(1 for v in values if v > 0)\n            total_count = len(values)\n            if non_zero_count > 0:\n                hover_text[i, j] = f\"Instance: {time_matrix.index[i]}<br>\" \\\n                                 f\"Error Type: {time_matrix.columns[j]}<br>\" \\\n                                 f\"Avg Time: {time_matrix.iloc[i, j]:.2f}<br>\" \\\n                                 f\"(from {non_zero_count} non-zero values)\"\n            else:\n                hover_text[i, j] = f\"Instance: {time_matrix.index[i]}<br>\" \\\n                                 f\"Error Type: {time_matrix.columns[j]}<br>\" \\\n                                 f\"Time: 0 (all {total_count} values were zero)\"\n    \n    fig = go.Figure(data=go.Heatmap(\n        z=time_matrix.values,\n        x=time_matrix.columns,\n        y=time_matrix.index,\n        colorscale='YlOrRd',\n        showscale=True,\n        text=np.round(time_matrix.values, 2),\n        texttemplate='%{text}',\n        textfont={'size': 10},\n        hovertemplate='%{customdata}<extra></extra>',\n        customdata=hover_text,\n        zmin=0,  # Set minimum value to 0\n        zmid=time_matrix.values.max() / 2 if time_matrix.values.max() > 0 else 0.5,  # Set midpoint\n        zauto=False  # Disable automatic range\n    ))\n    \n    fig.update_layout(\n        title=f'{type.capitalize()} Mode: Average Error Resolution Time by Instance<br><sub>*Using non-zero values where available; zero values shown where no non-zero times exist</sub>',\n        xaxis_title='Error Type',\n        yaxis_title='Instance',\n        height=500,\n        coloraxis_colorbar_title='Time'\n    )\n\n    fig = go.Figure(data=go.Heatmap(\n        z=time_matrix.values,\n        x=time_matrix.columns,\n        y=time_matrix.index,\n        colorscale='YlOrRd',\n        showscale=True,\n        text=np.round(time_matrix.values, 2),\n        texttemplate='%{text}',\n        textfont={'size': 10},\n        hovertemplate='%{customdata}<extra></extra>',\n        customdata=hover_text,\n        zmin=0,\n        zmid=time_matrix.values.max() / 2 if time_matrix.values.max() > 0 else 0.5,\n        zauto=False\n    ))\n    \n    fig.update_layout(\n        title=f'{type.capitalize()} Mode: Average Error Resolution Time by Instance<br><sub>Using non-zero values where available; zero values shown where no non-zero times exist</sub>',\n        xaxis_title='Error Type',\n        yaxis_title='Instance',\n        height=500,\n        width=1000,  # Set explicit width\n        margin=dict(l=50, r=50, t=100, b=50)\n    )\n    \n    return fig\n\n\ndef create_response_time_histogram(planned_df, reactive_df):\n    \"\"\"\n    Create a combined histogram and line chart comparing planned and reactive response times.\n    \"\"\"\n    # Calculate average response times for non-zero values for both modes\n    error_types = ['CameraError', 'FlightError', 'HardwareError']\n    \n    # Process planned data\n    planned_times = {}\n    for error_type in error_types:\n        times = planned_df[planned_df['error_type'] == error_type]['time']\n        non_zero_times = times[times > 0]\n        planned_times[error_type] = non_zero_times.mean() if len(non_zero_times) > 0 else 0\n\n    # Process reactive data\n    reactive_times = {}\n    for error_type in error_types:\n        times = reactive_df[reactive_df['error_type'] == error_type]['time']\n        non_zero_times = times[times > 0]\n        reactive_times[error_type] = non_zero_times.mean() if len(non_zero_times) > 0 else 0\n\n    # Create figure with secondary y-axis\n    fig = go.Figure()\n\n    # Add bars for planned mode\n    fig.add_trace(\n        go.Bar(\n            name='Planned',\n            x=error_types,\n            y=list(planned_times.values()),\n            text=np.round(list(planned_times.values()), 3),\n            textposition='auto',\n            marker_color='rgba(158,202,225,0.6)',\n            hovertemplate='Planned Mode<br>%{x}: %{y:.3f}s<extra></extra>'\n        )\n    )\n\n    # Add bars for reactive mode\n    fig.add_trace(\n        go.Bar(\n            name='Reactive',\n            x=error_types,\n            y=list(reactive_times.values()),\n            text=np.round(list(reactive_times.values()), 3),\n            textposition='auto',\n            marker_color='rgba(94,158,217,0.6)',\n            hovertemplate='Reactive Mode<br>%{x}: %{y:.3f}s<extra></extra>'\n        )\n    )\n\n    # Add lines connecting the points\n    fig.add_trace(\n        go.Scatter(\n            name='Planned (trend)',\n            x=error_types,\n            y=list(planned_times.values()),\n            mode='lines+markers',\n            line=dict(color='rgb(58,102,171)', width=2),\n            marker=dict(size=8),\n            hovertemplate='Planned Mode<br>%{x}: %{y:.3f}s<extra></extra>'\n        )\n    )\n\n    fig.add_trace(\n        go.Scatter(\n            name='Reactive (trend)',\n            x=error_types,\n            y=list(reactive_times.values()),\n            mode='lines+markers',\n            line=dict(color='rgb(137,59,59)', width=2),\n            marker=dict(size=8),\n            hovertemplate='Reactive Mode<br>%{x}: %{y:.3f}s<extra></extra>'\n        )\n    )\n\n    # Update layout\n    fig.update_layout(\n        title='Average Response Time Comparison: Planned vs Reactive',\n        xaxis_title='Error Type',\n        yaxis_title='Average Response Time (seconds)',\n        height=500,\n        width=1000,\n        margin=dict(l=50, r=50, t=100, b=50),\n        barmode='group',\n        hovermode='x unified',\n        legend=dict(\n            orientation=\"h\",\n            yanchor=\"bottom\",\n            y=1.02,\n            xanchor=\"right\",\n            x=1\n        )\n    )\n    \n    return fig\n\n\ndef planned_plot():\n    today = datetime.strftime(datetime.now(), '%d-%m-%Y')\n    error_df, planned_df, false_positives_df, counter = process_json_files('*-planned.json')\n    print(f\"Found {counter} data points as of {today}.\")\n    \n    # Create and display interactive distribution plot\n    dist_fig = create_interactive_visualization(error_df, false_positives_df, 'planned')\n    dist_fig.show()\n    \n    # Create and display heatmap\n    heatmap_fig = create_heatmap(error_df, 'planned')\n    heatmap_fig.show()\n    \n\ndef reactive_plot():\n    today = datetime.strftime(datetime.now(), '%d-%m-%Y')\n    error_df, reactive_df, false_positives_df, counter = process_json_files('*-reactive.json')\n    print(f\"Found {counter} data points as of {today}.\")\n    \n    # Create and display interactive distribution plot\n    dist_fig = create_interactive_visualization(error_df, false_positives_df, 'reactive')\n    dist_fig.show()\n    \n    # Create and display heatmap\n    heatmap_fig = create_heatmap(error_df, 'reactive')\n    heatmap_fig.show()\n\n\ndef create_histogram():\n    \"\"\"\n    Create visualization with both planned and reactive data.\n    \"\"\"\n    today = datetime.strftime(datetime.now(), '%d-%m-%Y')\n    \n    # Process planned data\n    planned_error_df, planned_df, planned_fp_df, planned_counter = process_json_files('*-planned.json')\n    print(f\"Found {planned_counter} planned mode data points as of {today}.\")\n    \n    # Process reactive data\n    reactive_error_df, reactive_df, reactive_fp_df, reactive_counter = process_json_files('*-reactive.json')\n    print(f\"Found {reactive_counter} reactive mode data points as of {today}.\")\n       \n    # Create combined response time visualization\n    response_time_fig = create_response_time_histogram(planned_error_df, reactive_error_df)\n    response_time_fig.show()\n```\n\n::: {.panel-tabset}\n## Planned\n```{python}\nplanned_plot()\ncreate_histogram()\n```\n\n## Reactive\n```{python}\nreactive_plot()\ncreate_histogram()\n```\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","theme":"cosmo","page-layout":"custom","title":"Planned vs Reactive Experiment Results","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}